#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teampoints:server');
var http = require('http');
var mysql = require('mysql')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function doSQL(sql,con)
{
  con.query(sql,function (err,result){
    if (err) throw err;
    console.log("1 record inserted");
  })
}

function makeUser(con,username,password,team)
{
  let sql = "INSERT INTO user(tp,name,team) VALUES (0,\""+username+"\","+team+")";
  doSQL(sql,con);
}

function makeTeam(con,name,pm)
{
  let sql = "INSERT INTO team(tp,name,pm) VALUES (0,\""+name+"\","+pm+")";
  doSQL(sql,con);
}

function makeTask(con,name,user)
{
  let sql = "INSERT INTO task(name,user) VALUES (\""+name+"\","+user+")";
  doSQL(sql,con);
}

function makeMilestone(con,team,reward,tp_needed,name)
{
  let sql = "INSERT INTO milestone(team,reward,tp_needed,name) VALUES ("+team+",\""+reward+"\","+tp_needed+",\""+name+"\")";
  doSQL(sql,con);
}

var con = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "ShayKing80",
  database: "gimep"
});

con.connect(function(err) {
  if (err) throw err;
  console.log("Connected")
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
